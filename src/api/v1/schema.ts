/**
 * This file was generated by codegen/openapi.ts
 * Do not edit this file manually.
 */

/* eslint-disable */

export interface paths {
  "/assets/{assetAddress}/top-holders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get the top 100 holders of an asset. */
    get: operations["getAssetTopHolders"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pools/assets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get pools matching one or more asset addresses. */
    get: operations["getAssetPools"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pools/recent": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get all pools created in the past 24 hours matching the provided filters. */
    get: operations["getRecentPools"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pools/top-traded": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get the top traded pools for the given interval. */
    get: operations["getTopTradedPools"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pools/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Search for pools by name or symbol. */
    get: operations["searchPools"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pools/{poolAddress}/actions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get actions for a pool. */
    get: operations["getPoolActions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    GetAssetTopHoldersResponse: {
      items: {
        address: string;
        amount: number;
        tags: string[];
      }[];
      count: number;
    };
    ValidatationFieldError: {
      /** @example username */
      path: string;
      message: string;
    };
    BaseError: {
      code: string;
      message: string;
    };
    ValidationError: components["schemas"]["BaseError"] & {
      /** @enum {string} */
      code?: "validation_failed";
      /** @enum {string} */
      message?: "Validation failed";
      field_errors: components["schemas"]["ValidatationFieldError"][];
    };
    UnauthorizedError: components["schemas"]["BaseError"] & {
      /** @enum {string} */
      code?: "unauthorized";
      /** @enum {string} */
      message?: "Unauthorized";
    };
    InternalServerError: components["schemas"]["BaseError"] & {
      /** @enum {string} */
      code?: "internal_server_error";
      /** @enum {string} */
      message?: "Internal server error";
    };
    PoolAsset: {
      address: string;
      name: string;
      symbol: string;
      decimals: number;
      icon_url: string | null;
      twitter_url: string | null;
      website_url: string | null;
      dev: string | null;
      price_usd: number | null;
      price_native: number | null;
      pool_amount: number | null;
      circulating_supply: number | null;
      total_supply: number | null;
      fdv: number | null;
      market_cap: number | null;
      launchpad: string | null;
      token_program_address: string;
      dev_mint_count: number | null;
    };
    PartialPoolAsset: {
      symbol: string;
      address: string;
      decimals: number;
      pool_amount: number | null;
    };
    PoolAudit: {
      mint_authority_disabled: boolean;
      freeze_authority_disabled: boolean;
      top_holders_percentage: number | null;
      lp_burned_percentage: number | null;
    };
    PoolStats: {
      price_change_percent: number;
      buy_volume_usd: number;
      sell_volume_usd: number;
      buy_count: number;
      sell_count: number;
      trader_count: number;
      buyer_count: number;
      seller_count: number;
    };
    Pool: {
      address: string;
      dex: string;
      type: string;
      base_asset: components["schemas"]["PoolAsset"];
      quote_asset: components["schemas"]["PartialPoolAsset"];
      audit: components["schemas"]["PoolAudit"];
      created_at: string;
      liquidity: number | null;
      stats_5m: components["schemas"]["PoolStats"];
      stats_1h: components["schemas"]["PoolStats"];
      stats_6h: components["schemas"]["PoolStats"];
      stats_24h: components["schemas"]["PoolStats"];
      bonding_curve: number | null;
      migrated_to: string | null;
      is_unreliable: boolean;
      updated_at: string;
    };
    GetPoolsResponse: {
      items: components["schemas"]["Pool"][];
    };
    GetRecentPoolsResponse: {
      items: components["schemas"]["Pool"][];
      total: number;
      next: number;
    };
    /**
     * @default created_at
     * @enum {string}
     */
    RecentPoolsSortBy:
      | "created_at"
      | "market_cap"
      | "volume_5m"
      | "volume_1h"
      | "volume_6h"
      | "volume_24h"
      | "txns_5m"
      | "txns_1h"
      | "txns_6h"
      | "txns_24h"
      | "liquidity";
    TopTradedPoolsResponse: {
      items: components["schemas"]["Pool"][];
    };
    /** @enum {string} */
    TopTradedPoolsInterval: "5m" | "1h" | "6h" | "24h";
    SearchPoolsResponse: {
      items: components["schemas"]["Pool"][];
      total: number;
      next: number;
    };
    SwapAction: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "swap";
      block_id: number;
      txn_hash: string;
      timestamp: string;
      id: string;
      trader_address: string;
      offer_asset_address: string;
      offer_amount: number;
      offer_asset_price_usd: number;
      return_asset_address: string;
      return_amount: number;
      return_asset_price_usd: number;
      volume_usd: number;
    };
    ProvideAction: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "provide";
      block_id: number;
      txn_hash: string;
      timestamp: string;
      id: string;
      trader_address: string;
      offer_asset_address: string;
      offer_amount: number;
      offer_asset_price_usd: number;
      return_asset_address: string;
      return_amount: number;
      return_asset_price_usd: number;
      volume_usd: number;
    };
    RemoveAction: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "remove";
      block_id: number;
      txn_hash: string;
      timestamp: string;
      id: string;
      trader_address: string;
      offer_asset_address: string;
      offer_amount: number;
      offer_asset_price_usd: number;
      return_asset_address: string;
      return_amount: number;
      return_asset_price_usd: number;
      volume_usd: number;
    };
    Action:
      | components["schemas"]["SwapAction"]
      | components["schemas"]["ProvideAction"]
      | components["schemas"]["RemoveAction"];
    GetPoolActionsResponse: {
      items: components["schemas"]["Action"][];
      next?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getAssetTopHolders: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assetAddress: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetAssetTopHoldersResponse"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerError"];
        };
      };
    };
  };
  getAssetPools: {
    parameters: {
      query: {
        /** @description List of up to 40 asset addresses to filter by. */
        addresses: string[] | string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetPoolsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerError"];
        };
      };
    };
  };
  getRecentPools: {
    parameters: {
      query?: {
        /** @description Only return pools created after this date, up to 24 hours ago. */
        created_after?: string;
        sort_by?: components["schemas"]["RecentPoolsSortBy"];
        sort_direction?: "asc" | "desc";
        limit?: number;
        offset?: number | null;
        /** @description Set to true to exclude pools for pump.fun tokens. */
        not_pumpfun_token?: "true" | "false";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetRecentPoolsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerError"];
        };
      };
    };
  };
  getTopTradedPools: {
    parameters: {
      query: {
        interval: components["schemas"]["TopTradedPoolsInterval"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TopTradedPoolsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerError"];
        };
      };
    };
  };
  searchPools: {
    parameters: {
      query: {
        query: string;
        limit?: number;
        offset?: number | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SearchPoolsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerError"];
        };
      };
    };
  };
  getPoolActions: {
    parameters: {
      query?: {
        offset?: string;
        trader_address?: string;
        /** @description Only return actions after this date. */
        after?: string | null;
        /** @description Only return actions prior to this date. */
        before?: string | null;
      };
      header?: never;
      path: {
        poolAddress: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetPoolActionsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InternalServerError"];
        };
      };
    };
  };
}
