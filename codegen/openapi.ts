import { createEnv } from "@t3-oss/env-core";
import { config } from "dotenv";
import fs from "fs";
import openapiTS, { astToString, type OpenAPI3 } from "openapi-typescript";
import path from "path";
import { z } from "zod";

import { API_DEFAULT_BASE_URL, API_VERSION_PATH } from "~/api/const";

config();

const env = createEnv({
  server: {
    API_BASE_URL: z.string().default(API_DEFAULT_BASE_URL),
  },
  runtimeEnvStrict: {
    API_BASE_URL: process.env.API_BASE_URL,
  },
});

const SCHEMA_FILE = "src/api/schema.ts";
const TYPES_FILE = "src/api/types.ts";

const FILE_HEADER = `/**
 * This file was generated by codegen/openapi.ts
 * Do not edit this file manually.
 */

/* eslint-disable */

`;

const TYPES_HEADER = `import type { components } from "./schema";

`;

export async function main() {
  const url = `${env.API_BASE_URL}/${API_VERSION_PATH}/openapi.json`;
  const schemaResponse = await fetch(url);
  if (!schemaResponse.ok) {
    console.error(`Failed to fetch schema: ${schemaResponse.statusText}`);
    process.exit(1);
  }
  const schema = (await schemaResponse.json()) as OpenAPI3;

  const ast = await openapiTS(schema);
  const schemaOutput = FILE_HEADER + astToString(ast);

  let typesOutput = FILE_HEADER + TYPES_HEADER;
  if (schema.components?.schemas) {
    for (const key in schema.components.schemas) {
      typesOutput += `export type ${key} = components["schemas"]["${key}"]\n`;
    }
  }

  await fs.promises.writeFile(
    path.join(import.meta.dirname, "..", SCHEMA_FILE),
    schemaOutput,
  );
  await fs.promises.writeFile(
    path.join(import.meta.dirname, "..", TYPES_FILE),
    typesOutput,
  );
}

void main();
